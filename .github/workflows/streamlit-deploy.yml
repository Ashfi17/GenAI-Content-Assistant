name: Deploy GenAI Content Assistant

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Application

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # For future testing

      - name: 🔍 Validate requirements.txt
        run: |
          echo "Checking if all imports are in requirements.txt..."
          python -c "
          import ast
          import sys

          # Read the main app file
          with open('app.py', 'r') as f:
              tree = ast.parse(f.read())

          # Extract imports
          imports = set()
          for node in ast.walk(tree):
              if isinstance(node, ast.Import):
                  for alias in node.names:
                      imports.add(alias.name.split('.')[0])
              elif isinstance(node, ast.ImportFrom):
                  if node.module:
                      imports.add(node.module.split('.')[0])

          # Read requirements
          with open('requirements.txt', 'r') as f:
              requirements = f.read().lower()

          # Check critical imports
          critical_missing = []
          for imp in ['streamlit']:
              if imp in imports and imp not in requirements:
                  critical_missing.append(imp)

          if critical_missing:
              print(f'Missing critical packages: {critical_missing}')
              sys.exit(1)
          else:
              print('All critical packages found in requirements.txt')
          "

      - name: 🎯 Test Streamlit app syntax
        run: |
          echo "Testing if Streamlit app can be imported..."
          python -c "
          import streamlit as st
          import sys
          import importlib.util

          try:
              spec = importlib.util.spec_from_file_location('app', 'app.py')
              module = importlib.util.module_from_spec(spec)
              # Don't execute, just check syntax
              print('✅ App syntax is valid')
          except Exception as e:
              print(f'❌ App syntax error: {e}')
              sys.exit(1)
          "

      - name: 🔧 Check Streamlit configuration
        run: |
          echo "Checking for Streamlit configuration issues..."
          python -c "
          import streamlit as st
          print('Streamlit import successful')
          print(f'Streamlit version: {st.__version__}')
          "

      - name: Generate test report
        run: |
          echo '## 🧪 Test Results' >> test_report.md
          echo '✅ Dependencies installed successfully' >> test_report.md
          echo '✅ Requirements.txt validation passed' >> test_report.md
          echo '✅ Streamlit app syntax check passed' >> test_report.md
          echo '✅ Streamlit configuration check passed' >> test_report.md
          echo '' >> test_report.md
          echo '### 📦 Installed Packages' >> test_report.md
          pip list >> test_report.md

      - name: 📤 Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test_report.md

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Streamlit Cloud
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎉 Deployment notification
        run: |
          echo "🚀 Deployment triggered for Streamlit Community Cloud!"
          echo "📱 Your app will be available at:"
          echo "   https://your-app-name-$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]').streamlit.app"
          echo ""
          echo "⏱️  Deployment usually takes 2-5 minutes..."
          echo "🔄 Streamlit Community Cloud will automatically pull the latest changes"

      - name: 📋 Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Trigger:** Push to main branch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Expected App URL:** https://your-app-name-$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]').streamlit.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏱️ **Status:** Deployment initiated - Streamlit Community Cloud will handle the rest!" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    name: 📢 Post-deployment
    if: always()

    steps:
      - name: 📊 Job status summary
        run: |
          echo "## 📊 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Job:** ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Job:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "**Overall Status:** SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your Streamlit app should be deploying now!" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Overall Status:** FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for errors." >> $GITHUB_STEP_SUMMARY
          fi
